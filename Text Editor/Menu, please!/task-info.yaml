type: edu
custom_name: stage3
files:
- name: test/EditorTest.java
  visible: false
  text: |
    import editor.TextEditor;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JMenuItemFixture;
    import org.assertj.swing.fixture.JScrollPaneFixture;
    import org.assertj.swing.fixture.JTextComponentFixture;
    import org.hyperskill.hstest.v6.stage.SwingTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;
    import org.junit.After;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.function.Supplier;


    class TestClue {

        public Supplier<Boolean> function;
        public String feedback;

        public TestClue(String feedback, Supplier<Boolean> function) {
            this.function = function;
            this.feedback = feedback;
        }

    }


    public class EditorTest extends SwingTest<TestClue> {

        public EditorTest() throws Exception {
            super(new TextEditor());
        }

        private JTextComponentFixture textArea;
        private JTextComponentFixture filenameField;
        private JButtonFixture saveButton;
        private JButtonFixture loadButton;
        private JScrollPaneFixture scrollPane;
        private JMenuItemFixture menuFile;
        private JMenuItemFixture menuLoad;
        private JMenuItemFixture menuSave;
        private JMenuItemFixture menuExit;

        String filename1 = "SomeFile.txt";
        String filename2 = "AnotherFile.txt";
        String noExistFile = "FileDoesNotExist";

        String textToSave1 = "Basic text editor\nType here too\nHere also\n\n";
        String textToSave2 = "                Sonnet I\n" +
            "     \n" +
            "     \n" +
            "FROM fairest creatures we desire increase,\n" +
            "That thereby beauty's rose might never die,\n" +
            "But as the riper should by time decease,\n" +
            "His tender heir might bear his memory:\n" +
            "But thou, contracted to thine own bright eyes,\n" +
            "Feed'st thy light'st flame with self-substantial fuel,\n" +
            "Making a famine where abundance lies,\n" +
            "Thyself thy foe, to thy sweet self too cruel.\n" +
            "Thou that art now the world's fresh ornament\n" +
            "And only herald to the gaudy spring,\n" +
            "Within thine own bud buriest thy content\n" +
            "And, tender churl, makest waste in niggarding.\n" +
            "Pity the world, or else this glutton be,\n" +
            "To eat the world's due, by the grave and thee.\n" +
            "\n" +
            "                 Sonnet II                   \n" +
            "\n" +
            "\n" +
            "When forty winters shall beseige thy brow,\n" +
            "And dig deep trenches in thy beauty's field,\n" +
            "Thy youth's proud livery, so gazed on now,\n" +
            "Will be a tatter'd weed, of small worth held:\n" +
            "Then being ask'd where all thy beauty lies,\n" +
            "Where all the treasure of thy lusty days,\n" +
            "To say, within thine own deep-sunken eyes,\n" +
            "Were an all-eating shame and thriftless praise.\n" +
            "How much more praise deserved thy beauty's use,\n" +
            "If thou couldst answer 'This fair child of mine\n" +
            "Shall sum my count and make my old excuse,'\n" +
            "Proving his beauty by succession thine!\n" +
            "This were to be new made when thou art old,\n" +
            "And see thy blood warm when thou feel'st it cold.";


        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(

                // general tests

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Title is empty",
                    () -> frame.getTitle().length() > 0)),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Window is not visible",
                    () -> frame.isVisible())),


                // existence tests

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no text component with name TextArea",
                    () -> checkExistence(() -> {
                        textArea = window.textBox("TextArea");
                        return textArea;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no text component with name FilenameField",
                    () -> checkExistence(() -> {
                        filenameField = window.textBox("FilenameField");
                        return filenameField;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no button with name SaveButton",
                    () -> checkExistence(() -> {
                        saveButton = window.button("SaveButton");
                        return saveButton;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no button with name LoadButton",
                    () -> checkExistence(() -> {
                        loadButton = window.button("LoadButton");
                        return loadButton;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no scroll component with name ScrollPane",
                    () -> checkExistence(() -> {
                        scrollPane = window.scrollPane("ScrollPane");
                        return scrollPane;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no menu option with name MenuFile",
                    () -> checkExistence(() -> {
                        menuFile = window.menuItem("MenuFile");
                        return menuFile;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no menu option with name MenuLoad",
                    () -> checkExistence(() -> {
                        menuLoad = window.menuItem("MenuLoad");
                        return menuLoad;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no menu option with name MenuSave",
                    () -> checkExistence(() -> {
                        menuSave = window.menuItem("MenuSave");
                        return menuSave;
                    }))),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "There is no menu option with name MenuExit",
                    () -> checkExistence(() -> {
                        menuExit = window.menuItem("MenuExit");
                        return menuExit;
                    }))),



                // logic tests

                new TestCase<TestClue>().setAttach(new TestClue(
                    "TextArea should be editable",
                    () -> {
                        textArea.requireEditable();
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "TextArea should be empty at the start of the program",
                    () -> {
                        textArea.requireEmpty();
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "FilenameField should be empty at the start of the program",
                    () -> {
                        filenameField.requireEmpty();
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "SaveButton should be enabled for clicking",
                    () -> saveButton.isEnabled())),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "LoadButton should be enabled for clicking",
                    () -> loadButton.isEnabled())),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Can't enter multiline text in TextArea.",
                    () -> {
                        textArea.setText(textToSave1);
                        textArea.requireText(textToSave1);
                        textArea.setText("");
                        textArea.setText(textToSave2);
                        textArea.requireText(textToSave2);
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Can enter multiline text in FilenameField, but shouldn't",
                    () -> {
                        String text = textToSave1;
                        filenameField.setText(text);
                        filenameField.requireText(text.replace("\n", " "));
                        filenameField.setText("");
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text in FilenameField and in TextArea " +
                        "should stay the same after saving file",
                    () -> {
                        filenameField.setText(filename1);
                        textArea.setText(textToSave1);

                        saveButton.click();

                        filenameField.requireText(filename1);
                        textArea.requireText(textToSave1);

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text in FilenameField and in TextArea " +
                        "should stay the same after saving file",
                    () -> {
                        String text = textToSave2;
                        String file = filename2;

                        filenameField.setText(file);
                        textArea.setText(text);

                        saveButton.click();

                        filenameField.requireText(file);
                        textArea.requireText(text);

                        filenameField.setText("");
                        textArea.setText("");

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text in FilenameField stay the same after loading file",
                    () -> {
                        String file = filename1;

                        filenameField.setText(file);
                        textArea.setText("");

                        loadButton.click();

                        filenameField.requireText(file);

                        filenameField.setText("");
                        textArea.setText("");

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text should be the same after saving and loading same file",
                    () -> {
                        String[] texts = {textToSave2, textToSave1};
                        String[] files = {filename1, filename2};

                        for (int i = 0; i < 2; i++) {

                            String text = texts[i];
                            String file = files[i];

                            filenameField.setText("");
                            textArea.setText("");

                            filenameField.setText(file);
                            textArea.setText(text);

                            saveButton.click();

                            filenameField.setText("");
                            textArea.setText("");

                            filenameField.setText(file);
                            loadButton.click();

                            textArea.requireText(text);
                        }

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "TextArea should be empty if user tries to " +
                        "load file that doesn't exist",
                    () -> {

                        textArea.setText(textToSave1);
                        filenameField.setText(noExistFile);

                        loadButton.click();
                        textArea.requireText("");

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "TextArea should correctly save and load an empty file",
                    () -> {
                        textArea.setText("");
                        filenameField.setText(filename1);

                        saveButton.click();
                        textArea.setText(textToSave2);
                        loadButton.click();
                        textArea.requireText("");

                        return true;
                    })),



                // menu-related tests

                new TestCase<TestClue>().setAttach(new TestClue(
                    "MenuLoad should be enabled for clicking",
                    () -> {
                        menuLoad.requireEnabled();
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "MenuSave should be enabled for clicking",
                    () -> {
                        menuSave.requireEnabled();
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "MenuFile should be enabled for clicking",
                    () -> {
                        menuFile.requireEnabled();
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "MenuExit should be enabled for clicking",
                    () -> {
                        menuExit.requireEnabled();
                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text in FilenameField and in TextArea " +
                        "should stay the same after saving file using MenuSave",
                    () -> {
                        filenameField.setText(filename1);
                        textArea.setText(textToSave1);

                        menuSave.click();

                        filenameField.requireText(filename1);
                        textArea.requireText(textToSave1);

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text in FilenameField and in TextArea " +
                        "should stay the same after saving file using MenuSave",
                    () -> {
                        String text = textToSave2;
                        String file = filename2;

                        filenameField.setText(file);
                        textArea.setText(text);

                        menuSave.click();

                        filenameField.requireText(file);
                        textArea.requireText(text);

                        filenameField.setText("");
                        textArea.setText("");

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text in FilenameField stay " +
                        "the same after loading file using MenuLoad",
                    () -> {
                        String file = filename1;

                        filenameField.setText(file);
                        textArea.setText("");

                        menuLoad.click();

                        filenameField.requireText(file);

                        filenameField.setText("");
                        textArea.setText("");

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "Text should be the same after saving " +
                        "and loading same file using MenuLoad",
                    () -> {
                        String[] texts = {textToSave2, textToSave1};
                        String[] files = {filename1, filename2};

                        for (int i = 0; i < 2; i++) {

                            String text = texts[i];
                            String file = files[i];

                            filenameField.setText("");
                            textArea.setText("");

                            filenameField.setText(file);
                            textArea.setText(text);

                            menuSave.click();

                            filenameField.setText("");
                            textArea.setText("");

                            filenameField.setText(file);
                            menuLoad.click();

                            textArea.requireText(text);
                        }

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "TextArea should be empty if user tries to " +
                        "load file that doesn't exist using MenuLoad",
                    () -> {

                        textArea.setText(textToSave1);
                        filenameField.setText(noExistFile);

                        menuLoad.click();
                        textArea.requireText("");

                        return true;
                    })),

                new TestCase<TestClue>().setAttach(new TestClue(
                    "TextArea should correctly save and load an empty file using menu",
                    () -> {
                        textArea.setText("");
                        filenameField.setText(filename1);

                        menuSave.click();
                        textArea.setText(textToSave2);
                        menuLoad.click();
                        textArea.requireText("");
                        return true;
                    }))
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            try {
                return new CheckResult(clue.function.get(), clue.feedback);
            }
            catch (AssertionError ex) {
                return new CheckResult(false, clue.feedback);
            }
        }

        @After
        public void deleteFiles() {
            try {
                Files.delete(Paths.get(filename1));
                Files.delete(Paths.get(filename2));
            }
            catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
  learner_created: false
- name: src/editor/TextEditor.java
  visible: true
  text: |-
    package editor;

    import javax.swing.*;
    import javax.swing.border.Border;
    import javax.swing.border.CompoundBorder;
    import javax.swing.border.EmptyBorder;
    import java.awt.*;
    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.ArrayList;
    public class TextEditor extends JFrame implements SaveLoadListener {
        JTextArea textArea;

        public TextEditor() {
            setTitle("Text Editor");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(700, 500);
            textArea = new JTextArea(200, 200);
            textArea.setName("TextArea");
            JScrollPane scrollableTextArea = new JScrollPane(textArea);
            scrollableTextArea.setName("ScrollPane");
            scrollableTextArea.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollableTextArea.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            BorderFactory.setMargin(scrollableTextArea, 10, 10, 10, 10);
            add(scrollableTextArea, BorderLayout.CENTER);
            SaveLoadControl fileSelection = new SaveLoadControl();
            fileSelection.addSaveLoadListener(this);
            BorderFactory.setMargin(fileSelection, 5, 0, 0, 5);
            add(fileSelection, BorderLayout.NORTH);
            setVisible(true);

        }

        @Override
        public void onClick(String fileName, Actions action) throws IOException {
            File file = new File(fileName);
            switch (action) {
                case LOAD_FILE:
                    if (file.exists()) loadTextFromFile(file);
                    else textArea.setText("");
                    break;
                case SAVE_FILE:
                    saveTextToFile(file);
                    break;
                default:
                    throw new IllegalStateException("Unexpected value: " + action);
            }
        }

        void loadTextFromFile(File file) throws IOException {
            Path path = Paths.get(file.getPath());
            String text = new String(Files.readAllBytes(path));
            textArea.setText(text);
        }

        void saveTextToFile(File file) {

            String text = textArea.getText();
            Path path = Paths.get(file.getPath());
            try {
                Files.write(path, text.getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    class BorderFactory {
        public static void setMargin(JComponent component, int top, int right, int bottom, int left) {
            Border border = component.getBorder();
            Border marginBorder = new EmptyBorder(new Insets(top, left, bottom, right));
            component.setBorder(border == null ? marginBorder
                    : new CompoundBorder(marginBorder, border));
        }
    }
  learner_created: false
- name: src/editor/ApplicationRunner.java
  visible: true
  text: |-
    package editor;


    public class ApplicationRunner {
        public static void main(String[] args) {
            new TextEditor();
        }
    }
  learner_created: false
- name: src/editor/SaveLoadControl.java
  visible: true
  text: |-
    package editor ;

    import javax.swing.* ;
    import java.awt.*;
    import java.io.IOException;
    import java.util.ArrayList;


    interface SaveLoadListener {
        enum Actions {
            SAVE_FILE,
            LOAD_FILE
        }

        void onClick(String fileName, final Actions action) throws IOException;
    }
    class SaveLoadControl extends JPanel {
        ArrayList<SaveLoadListener> buttonListeners = new ArrayList<>();
        private JTextField fileNameField;

        SaveLoadControl() {
            setLayout(new FlowLayout(FlowLayout.LEFT));
            fileNameField = new JTextField();
            fileNameField.setName("FilenameField");
            fileNameField.setColumns(30);
            JButton saveButton = new JButton();
            saveButton.setName("SaveButton");
            saveButton.setText("Save");
            saveButton.addActionListener(actionEvent -> {
                try {
                    saveFileButtonAction();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });

            JButton loadButton = new JButton();
            loadButton.setName("LoadButton");
            loadButton.setText("Load");
            loadButton.addActionListener(actionEvent -> {
                try {
                    loadFileButtonAction();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
            this.add(fileNameField);
            this.add(saveButton);
            this.add(loadButton);
        }

        void addSaveLoadListener(SaveLoadListener listener) {
            buttonListeners.add(listener);
        }

        private void loadFileButtonAction() throws IOException {
            String fileName = fileNameField.getText();
            if (fileName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "File name is empty!");
            } else {
                for (SaveLoadListener listener : buttonListeners) {
                    listener.onClick(fileName, SaveLoadListener.Actions.LOAD_FILE);
                }
            }
        }

        private void saveFileButtonAction() throws IOException {
            String fileName = fileNameField.getText();
            if (fileName.isEmpty()) {
                JOptionPane.showMessageDialog(null, "File name is empty!");
            } else
                for (SaveLoadListener listener : buttonListeners) {
                    listener.onClick(fileName, SaveLoadListener.Actions.SAVE_FILE);
                }
        }
    }
  learner_created: false
- name: src/Azer
  visible: true
  learner_created: false
feedback_link: https://hyperskill.org/projects/38/stages/203/implement
status: Unchecked
record: -1
